{"version":3,"file":"node_modules_vendus_sockets-for-cordova_socket_js.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;AAEA","sources":["webpack://pos-base/../../node_modules/@vendus/sockets-for-cordova/socket.js"],"sourcesContent":["/**\n * Copyright (c) 2015, Blocshop s.r.o.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms are permitted\n * provided that the above copyright notice and this paragraph are\n * duplicated in all such forms and that any documentation,\n * advertising materials, and other materials related to such\n * distribution and use acknowledge that the software was developed\n * by the Blocshop s.r.o.. The name of the\n * Blocshop s.r.o. may not be used to endorse or promote products derived\n * from this software without specific prior written permission.\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n */\n\n\n// var exec = require('cordova/exec');\n\nvar SOCKET_EVENT = \"SOCKET_EVENT\";\nvar CORDOVA_SERVICE_NAME = \"SocketsForCordova\";\n\nSocket.State = {};\nSocket.State[Socket.State.CLOSED = 0] = \"CLOSED\";\nSocket.State[Socket.State.OPENING = 1] = \"OPENING\";\nSocket.State[Socket.State.OPENED = 2] = \"OPENED\";\nSocket.State[Socket.State.CLOSING = 3] = \"CLOSING\";\n\nSocket.ErrorType = {};\nSocket.ErrorType[Socket.ErrorType.GENERAL = 0] = \"general\";\nSocket.ErrorType[Socket.ErrorType.OPEN_TIMEOUT = 1] = \"openTimeout\";\nSocket.ErrorType[Socket.ErrorType.WRITE_TIMEOUT = 2] = \"writeTimeout\";\n\nfunction Socket() {\n    this._state = Socket.State.CLOSED;\n    this.onData = null;\n    this.onClose = null;\n    this.onError = null;\n    this.socketKey = guid();\n}\n\nSocket.prototype.open = function (host, port, success, error) {\n\n    success = success || function () {\n        };\n    error = error || function () {\n        };\n\n    if (!this._ensureState(Socket.State.CLOSED, error)) {\n        return;\n    }\n\n    var _that = this;\n\n    function socketEventHandler(event) {\n\n        var payload = event.payload;\n\n        if (payload.socketKey !== _that.socketKey) {\n            return;\n        }\n\n        switch (payload.type) {\n            case \"Close\":\n                _that._state = Socket.State.CLOSED;\n                window.document.removeEventListener(SOCKET_EVENT, socketEventHandler);\n                _that.onClose(payload.hasError);\n                break;\n            case \"DataReceived\":\n                _that.onData(new Uint8Array(payload.data));\n                break;\n            case \"Error\":\n                _that.onError(payload);\n                break;\n            default:\n                console.error(\"SocketsForCordova: Unknown event type \" + payload.type + \", socket key: \" + payload.socketKey);\n                break;\n        }\n    }\n\n    _that._state = Socket.State.OPENING;\n\n    cordova.exec(\n        function () {\n            _that._state = Socket.State.OPENED;\n            window.document.addEventListener(SOCKET_EVENT, socketEventHandler);\n            success();\n        },\n        function (errorMessage) {\n            _that._state = Socket.State.CLOSED;\n            error(errorMessage);\n        },\n        CORDOVA_SERVICE_NAME,\n        \"open\",\n        [\n            this.socketKey,\n            host,\n            port\n        ]);\n};\n\nSocket.prototype.write = function (data, success, error) {\n\n    success = success || function () {\n        };\n    error = error || function () {\n        };\n\n    if (!this._ensureState(Socket.State.OPENED, error)) {\n        return;\n    }\n\n    var dataToWrite = data instanceof Uint8Array\n        ? Socket._copyToArray(data)\n        : data;\n\n    cordova.exec(\n        success,\n        error,\n        CORDOVA_SERVICE_NAME,\n        \"write\",\n        [\n            this.socketKey,\n            dataToWrite\n        ]);\n};\n\nSocket.prototype.shutdownWrite = function (success, error) {\n\n    success = success || function () {\n        };\n    error = error || function () {\n        };\n\n    if (!this._ensureState(Socket.State.OPENED, error)) {\n        return;\n    }\n\n    cordova.exec(\n        success,\n        error,\n        CORDOVA_SERVICE_NAME,\n        \"shutdownWrite\",\n        [this.socketKey]);\n};\n\nSocket.prototype.close = function (success, error) {\n\n    success = success || function () {\n        };\n    error = error || function () {\n        };\n\n    if (!this._ensureState(Socket.State.OPENED, error)) {\n        return;\n    }\n\n    this._state = Socket.State.CLOSING;\n\n    cordova.exec(\n        success,\n        error,\n        CORDOVA_SERVICE_NAME,\n        \"close\",\n        [this.socketKey]);\n};\n\nObject.defineProperty(Socket.prototype, \"state\", {\n    get          : function () {\n        return this._state;\n    },\n    enumerable   : true,\n    configurable : true\n});\n\nSocket.prototype._ensureState = function (requiredState, errorCallback) {\n    var state = this._state;\n    if (state != requiredState) {\n        window.setTimeout(function () {\n            errorCallback(\"Invalid operation for this socket state: \" + Socket.State[state]);\n        });\n        return false;\n    }\n    else {\n        return true;\n    }\n};\n\nSocket.dispatchEvent = function (event) {\n    var eventReceive = document.createEvent('Events');\n    eventReceive.initEvent(SOCKET_EVENT, true, true);\n    eventReceive.payload = event;\n\n    document.dispatchEvent(eventReceive);\n};\n\nSocket._copyToArray = function (array) {\n    var outputArray = new Array(array.length);\n    for (var i = 0; i < array.length; i++) {\n        outputArray[i] = array[i];\n    }\n    return outputArray;\n};\n\nvar guid = (function () {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n\n    return function () {\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n            s4() + '-' + s4() + s4() + s4();\n    };\n})();\n\n// Register event dispatcher for Windows Phone\nif (navigator.userAgent.match(/iemobile/i)) {\n    window.document.addEventListener(\"deviceready\", function () {\n        cordova.exec(\n            Socket.dispatchEvent,\n            function (errorMessage) {\n                console.error(\"SocketsForCordova: Cannot register WP event dispatcher, Error: \" + errorMessage);\n            },\n            CORDOVA_SERVICE_NAME,\n            \"registerWPEventDispatcher\",\n            []);\n    });\n}\n\nmodule.exports = Socket;"],"names":[],"sourceRoot":""}